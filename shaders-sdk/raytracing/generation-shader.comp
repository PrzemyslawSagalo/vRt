#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXTEND_LOCAL_GROUPS
#define IS_RAY_GEN
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"

// use partition by 8x8
// paging optimized tiling
const uint R_BLOCK_WIDTH = 8, R_BLOCK_HEIGHT = 8;
const uint R_BLOCK_SIZE = R_BLOCK_WIDTH * R_BLOCK_HEIGHT;
layout (local_size_x = R_BLOCK_WIDTH, local_size_y = R_BLOCK_HEIGHT) in;

layout ( binding = 0, set = 2, std430 ) readonly buffer VT_GEN_EXAMPLE {
    mat4x4 camInv, projInv;
    vec4 sceneRes;
    int enable360, variant, r1, r2;
} cameraUniform;

layout ( binding = 2, set = 2, rgba32f ) uniform image2D _devImages[4];
#define ColorOutput _devImages[0]
#define NormalPass _devImages[1]
#define OriginPass _devImages[2]
#define SpecularPass _devImages[3]

layout ( binding = 3, set = 2, std430 ) readonly buffer VT_PARTITION {
    int partID, partSize, r0, r1;
} partitionUniform;



// UNUSED: https://developer.oculus.com/blog/tech-note-mask-based-foveated-rendering-with-unreal-engine-4-/ (sort of... been in past)
//   USED: sorts of VK_EXT_sample_locations or GL_NV_sample_locations

const float center_p = 0.5f-SFN;
shared VtRay lrays[R_BLOCK_SIZE];
#define ray lrays[Local_Idx]

// planned ray generation shader example
void main() {
    const ivec2 wh = /*stageUniform.size.xy*/ ivec2(cameraUniform.sceneRes.xy), xy = ivec2(Launch_Idx.xy) + ivec2(0, stageUniform.size.y*partitionUniform.partID);
    //xy.y = (xy.y<<1) + ((int(WID)+xy.x)&1); // make checkerboard from direct pointers
    [[flatten]] IFANY (WID > 0) return;
    [[flatten]] if (all(greaterThanEqual(xy,(0).xx)) && all(lessThan(xy,wh))) {
        //const vec2 rnd = center_p.xx;
        const vec2 rnd = unorm16x2Construct(hash(uvec2(p2x_16(uvec2(xy)), 1u)));
        const vec2 coord = vec2(vec2(xy)+rnd)/vec2(wh);

        vec4 dir = vec4(0.f), orig = mult4(cameraUniform.camInv, vec4(vec3(0.0f), 1.0f)), eye = orig;
        //IFANY (cameraUniform.enable360 == 1) {
            //dir = mult4(cameraUniform.camInv, vec4(dcts(coord+vec2(-0.25f,0.f)), 0.f));
        //} else {
            vec4 co = divW(mult4(cameraUniform.camInv, mult4(cameraUniform.projInv, vec4(fma(coord, 2.0f.xx, -1.0f.xx), 1.f-SFN, 1.0f))));
            orig = divW(mult4(cameraUniform.camInv, mult4(cameraUniform.projInv, vec4(fma(coord, 2.0f.xx, -1.0f.xx),     SFN, 1.0f))));

            dir = co - orig; //vec4(normalize(co.xyz - orig.xyz)*vec3(1.f,1.f,1.f), 0.0f);
        //};

        ray.dcolor = uvec2(0u.xx);
        writeColor(ray.dcolor, 1.f.xxxx);
        parameterb(RAY_ACTIVED, ray.dcolor.y, true);
        
        ray.origin.xyz = orig.xyz;
        ray.cdirect = lcts(normalize(dir.xyz));

        // filtering off rays by resolution
        
        ISTORE(ColorOutput, xy, vec4(0.f.xxx, 1.f));
        //ISTORE(ColorOutput, xy, vec4(vec3(0.8f, 0.4f, 0.4f)*0.5f, 1.f));
        ISTORE(NormalPass, xy, vec4(0.f.xxx, 0.f));
        ISTORE(OriginPass, xy, vec4(0.f.xxx, 1.f));
        ISTORE(SpecularPass, xy, vec4(0.f.xxx, 0.f));
        //vtReuseRays(ray, uvec2(xy), 0, int(Launch_Idx.y * wh.x + Launch_Idx.x)); // prefer strict layout
        vtEmitRays(ray, uvec2(xy), 0);
    };
};
