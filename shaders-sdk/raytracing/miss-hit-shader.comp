#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define DISCARD_SHARED_CACHING
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
//#define CACHE_HIT_PAYLOAD
//#define DMA_HIT // unpreferred

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"
#include "./submodules/environment.glsl"


#define wgs gl_NumWorkGroups.x
#define r4ID int((RPG_OFF+rayID)<<2)
#define rayID (hit.rayID-1)
#define cray rays[RPG_OFF+rayID]


VtHitPayload hitp;
LOCAL_SIZE_LAYOUT;

void main() {
    const uint wsize = min(missHitTypedCounterRead[ stageUniform.currentGroup][WID], MAX_HITS); IFANY (wsize <= 0) return;
    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 2097152u);
    for (uint w=0;w<wcount;w+=wgs) {
        const int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        const bool overflow = globalID >= wsize || globalID < 0; IFALL(overflow) break;
        const int hitID = overflow ? -1 : vtMissId(globalID,  stageUniform.currentGroup);

#ifdef DMA_HIT
        #define hit hits[HPG_OFF+hitID]
#else
        VtHitData hit = hits[HPG_OFF+hitID];
#endif

        [[flatten]] if (!overflow && rayID >= 0 && hitID >= 0 && vtFetchHitIdc(rayID) == -1) { // if hit is valid and not overriden
            const vec3 viewVec = dcts(cray.cdirect), rorigin = cray.origin.xyz;
            globalInvocationSMP = globalID;

            // environment
            hitp.specularGlossiness = vec4(0.f.xxx, 1.f);
            hitp.albedo = vec4(0.f.xxx, 1.f);
            //EnvironmentShader(hitp.emission, cray); // we doesn't enabled HDRI support ( we add support later )
            
            // ray direction debug emission
            //hitp.emission = vec4((viewVec*0.5f+0.5f)*0.5f, 1.f); // 
            //hitp.emission = vec4(toLinear(vec3(0.05f, 0.05f, 0.2f)), 1.f);
            hitp.emission = vec4(toLinear(vec3(153, 204, 255)/255.f.xxx)*0.5f, 1.f); // solid skycolor 
            //hitp.emission = vec4(toLinear(vec3(0.01f, 0.015f, 0.12f)), 1.f);

            hitp.albedo = hitp.emission+vec4(0.f.xxx, 0.f);
            // additional validation of hit (hit point interpolated offset test)

            const uint chit = (hitID+1), ghit = imageAtomicCompSwap(rayLink,r4ID,0u,chit.x);//imageAtomicMin(rayLink,r4ID,chit.x);
            //[[flatten]] if (ghit >= chit && hit.uvt.z <= fma(hits[HPG_OFF+(ghit-1)].uvt.z,1.f,SFN)) { // also, required range checking for correct more results
                //[[flatten]] if (imageAtomicCompSwap(rayLink,r4ID|2,0xFFFFFFFFu,chit.x) == 0xFFFFFFFFu) 
                [[flatten]] if (ghit == 0u) {
                    const int pid = atomicIncPayloadHitCount();
                    hit.payloadID = pid+1;
                    hit.idat = (-1).xxxx;
#ifndef DMA_HIT
                    hits[HPG_OFF+hitID] = hit;
#endif
                    hitPayload[HPG_OFF+pid] = hitp;
                };
            //};
        };
    };
};
