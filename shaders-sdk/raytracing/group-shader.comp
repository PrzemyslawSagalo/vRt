#version 460 core
#extension GL_GOOGLE_include_directive : enable

//#define EXTEND_LOCAL_GROUPS

#define ENABLE_RAY_PUSH
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"

// user descriptor set output image
layout ( rgba32f, binding = 2, set = 2 ) uniform image2D _devImages[4];
#define ColorOutput _devImages[0]
#define NormalPass _devImages[1]
#define OriginPass _devImages[2]
#define SpecularPass _devImages[3]


#define wgs gl_NumWorkGroups.x
#define hitp hitPayload[HPG_OFF+hitpId]
#define hit hits[HPG_OFF+hitIdc]


// UNUSED: adaptive sample accumulation and super-sampling (i.e. High DPI production support by reducing samples per pixels, using generated resampling)
// Can seen in outdated "satellite" ray-tracer
// Also, we have another vision of "DPI-pixel-sampling" problem, so we can use sample locations for generation bigger images by progressing smaller count of samples
// papers: ???.pdf ( no direct equivalent )


LOCAL_SIZE_LAYOUT;
// 

void main() {
    //ray.fdata = 0.f.xxxx, ray.bitspace = 0u.xxxx;
    const uint wsize = min(uint(rayTypedCounterRead[stageUniform.currentGroup][WID]), uint(MAX_RAYS)); IFANY (wsize <= 0) return;
    const uint wcount = min(tiled(wsize, gl_WorkGroupSize.x), 2097152u);
    for (uint w=0;w<wcount;w+=wgs) {
        const int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        const int rayID = (globalID < wsize ? rayGroupIndicesRead[RPG_OFF+globalID] : 0)-1;
        //const int rayID = (globalID < wsize ? (globalID+1) : 0)-1;
        const bool overflow = globalID >= wsize || globalID < 0; IFALL(overflow) break;

        // get ray by id
        ray.fdata = 0.f.xxxx, ray.bitspace = 0u.xxxx;
        if (!overflow) ray = rays[RPG_OFF+rayID];
        const int hitIdc = vtFetchHitClosest(rayID);
        
        const int hitpId = hit.payloadID-1;
        const vec4 diffuse = hitp.albedo, reflc = hitp.specularGlossiness;
        const float shiftLenght = fma(sqrt(hit.uvt.z*SFN),SFO,SFN); // TODO: advanced correction of ray starting

        // get output image 2D coord
        const uvec2 ucoord = vtFetchIndex(rayID);
        const ivec2 icoord = ivec2(ucoord);

        // add support for multi-passing
        [[flatten]] if (!overflow && rayID >= 0) {
            // reflection prior (early stage)
            const vec4 ecolor = point4(f16_f32(ray.dcolor));
            const vec4 rcolor = ecolor * float(hit.idat.y>=0), bcolor = imageLoad(ColorOutput, icoord);
            const vec3 orgdir = dcts(ray.cdirect);
            const vec3 normal = hitp.normalHeight.xyz, orignv = fma(orgdir, hit.uvt.zzz, ray.origin.xyz);

            // get real origin of ray
            ray.origin.xyz = orignv;
            vtWriteColor(ray.dcolor, vec4(0.f.xxx, 1.f));

            // alternate of http://www.cwyman.org/papers/i3d17_hashedAlpha.pdf
            float alph = diffuse.a >= hrand(uvec4( vtFetchCode(rayID), stageUniform.iteration, packSnorm4x16(vec4(orgdir, 0.f)) )) ? 1.f : 0.f;
            [[flatten]] if (stageUniform.iteration == stageUniform.lastIteration) alph = diffuse.a;

            // transparency ray
            {   const vec3 vdir = orgdir, shift = vdir;
                ray.origin.xyz = fma(shift, shiftLenght.xxx, orignv);
                vtWriteColor(ray.dcolor, vec4(rcolor.xyz * (1.f - alph).xxx, 1.f));
                vtReuseRays(ucoord.xy, 0, rayID);
            };
            
            // create data for reflection rays
            {
                const vec3 vdir = reflect(orgdir, normal), shift = vdir;
                const vec3 orig = fma(shift, shiftLenght.xxx, orignv);
                const vec3 rcol = (rcolor.xyz * alph) * reflc.xyz;

                ISTORE(OriginPass, icoord, vec4(orig, 1.f));
#ifdef EXPERIMENTAL_UNORM16_DIRECTION
                ISTORE(NormalPass, icoord, vec4(lcts(vdir),0.f.xxx));
#else
                ISTORE(NormalPass, icoord, vec4(uintBitsToFloat(lcts(vdir)),0.f.xx));
#endif
                ISTORE(SpecularPass, icoord, vec4(rcol, reflc.w));
            };

            { // output color
                const vec3 outcolor = ecolor.xyz * (1.f - reflc.xyz) * alph;
                ISTORE(ColorOutput, icoord, vec4(fma(diffuse.xyz, outcolor.xyz, bcolor.xyz), 1.f));
            };
        }
    }

    //LGROUP_BARRIER;
}
