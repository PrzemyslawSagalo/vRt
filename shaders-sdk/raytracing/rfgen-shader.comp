#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define IS_RAY_GEN
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"

// use partition by 8x8
const int R_BLOCK_WIDTH = 8, R_BLOCK_HEIGHT = 8;
const int R_BLOCK_SIZE = R_BLOCK_WIDTH * R_BLOCK_HEIGHT;
layout (local_size_x = R_BLOCK_WIDTH, local_size_y = R_BLOCK_HEIGHT) in;
//LOCAL_SIZE_LAYOUT;

layout (binding = 0, set = 2, std430) readonly buffer VT_GEN_EXAMPLE {
    mat4x4 camInv;
    mat4x4 projInv;
    vec4 sceneRes;
    int enable360, variant, r1, r2;
} cameraUniform;

layout ( binding = 3, set = 2, std430 ) readonly buffer VT_PARTITION {
    int partID, partSize, r0, r1;
} partitionUniform;

layout ( rgba32f, binding = 2, set = 2 ) uniform image2D _devImages[4];
#define ColorOutput _devImages[0]
#define NormalPass _devImages[1]
#define OriginPass _devImages[2]
#define SpecularPass _devImages[3]

shared VtRay lrays[64];
#define ray lrays[Local_Idx]

// planned ray generation shader example
void main() {
    //ivec2 wh = stageUniform.size.xy, xy = ivec2(Launch_Idx.xy);
    const ivec2 wh = /*stageUniform.size.xy*/ ivec2(cameraUniform.sceneRes.xy), xy = ivec2(Launch_Idx.xy) + ivec2(0, stageUniform.size.y*partitionUniform.partID);
    //xy.y = (xy.y<<1) + ((int(WID)+xy.x)&1); // make checkerboard from direct pointers
    IFANY (WID > 0) return;

    ray.dcolor = uvec2(0u.xx);
    writeColor(ray.dcolor, imageLoad(SpecularPass, xy));
    parameterb(RAY_ACTIVED, ray.dcolor.y, true);
    
    ray.origin  = imageLoad(OriginPass, xy).xyz;
#ifdef EXPERIMENTAL_UNORM16_DIRECTION
    ray.cdirect = imageLoad(NormalPass, xy).x;
#else
    ray.cdirect = floatBitsToUint(imageLoad(NormalPass, xy).xy); // use cheaper method in this example
#endif

    // filtering off rays by resolution
    [[flatten]] if (xy.x < wh.x && xy.y < wh.y && max3_vec(f16_f32(ray.dcolor)) >= 1e-3f) {
        //ISTORE(ColorOutput, xy, vec4(0.f.xxx, 1.f));
        ISTORE(NormalPass, xy, vec4(0.f.xxx, 0.f));
        ISTORE(OriginPass, xy, vec4(0.f.xxx, 1.f));
        ISTORE(SpecularPass, xy, vec4(0.f.xxx, 0.f));
        //vtReuseRays(ray, uvec2(xy), 0, int(Launch_Idx.y * wh.x + Launch_Idx.x)); // prefer strict layout
        vtEmitRays(ray, uvec2(xy), 0);
    };

    //LGROUP_BARRIER;
};
