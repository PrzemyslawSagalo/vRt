#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXPERIMENTAL_INSTANCING_SUPPORT
#define BVH_CREATION
#define LEAF_GEN

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/morton.glsl"


// bvh uniform unified
struct BvhBlockT {
    int entryID, leafCount; // leafCount reserved for ESC versions
    int primitiveCount, primitiveOffset; // first for default triangle limit, second for correct vertex data block ( because assembled set should have shared buffer )
    mat3x4 transform;//, transformInv; // we resolved to save that row 
    vec4 sceneMin, sceneMax;
};


layout ( binding = 9, set = 0, align_ssbo ) readonly buffer SceneBoxB { vec4 minmax[]; };
layout ( binding = 0, set = 1, align_ssbo ) restrict buffer bvhBlockB { BvhBlockT data[]; } bvhBlockState_[];
#define bvhBlock bvhBlockState_[0].data[0]

LOCAL_SIZE_LAYOUT;

void main() {

    // calculate box boundary of scene 
    vec4 gmn = INFINITY.xxxx, gmx = -INFINITY.xxxx;
    [[unroll, dependency_length(4)]] for (uint I=0u;I<256u;I+=Wave_Size_RT) {
        const uint it = I + Lane_Idx;
        gmn = min(gmn, subgroupMin(minmax[it*2+0]));
        gmx = max(gmx, subgroupMax(minmax[it*2+1]));
    };
    LGROUP_BARRIER

    // these operations calculating only on one ALU, so can be used more precised point
    // also, it no require so much free registers
    [[flatten]] if (electedInvoc()) { bvhBlock.sceneMin = gmn, bvhBlock.sceneMax = gmx; };
    //    const mat4 inversedpj = inverse(mat4(transpose(bvhBlock.transform))); // set inversed version of projection
    //    bvhBlock.transformInv = transpose(mat4(inversedpj)), bvhBlock.sceneMin = gmn, bvhBlock.sceneMax = gmx;
    //};
    
};
