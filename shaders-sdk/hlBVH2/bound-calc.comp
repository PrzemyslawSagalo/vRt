#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXPERIMENTAL_INSTANCING_SUPPORT
#define EXTEND_LOCAL_GROUPS
#define BVH_CREATION

//#define fpInner InZero
//#define fpInner SFN

// force undef fp16
#ifdef USE_F16_BVH
#undef USE_F16_BVH
#endif

// force define fp32
#ifndef USE_F32_BVH
#define USE_F32_BVH
#endif

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/vertex.glsl"
#include "./include/bvh-inputs.glsl"


layout ( binding = 9, set = 0, align_ssbo ) workgroupcoherent buffer SceneBoxB { vec4 minmax[]; };

bbox_t getMinMaxPrimitive(in uint idx) {
    return Leafs[0u+clamp(idx, 0u, max(bvhBlockTop.leafCount,1u)-1u)].lbox;
};

bbox_t bbox_tunion(in bbox_t b1, in bbox_t b2) {
    return bbox_t(min(b1.mn, b2.mn), max(b1.mx, b2.mx));
};

bbox_t bbox_tunion3(in bbox_t b1, in bbox_t b2, in bbox_t c3) {
    return bbox_t(min3_wrap(b1.mn, b2.mn, c3.mn), max3_wrap(b1.mx, b2.mx, c3.mx));
};


layout ( local_size_x = WORK_SIZE_BND ) in;
shared bbox_t sdata[ WORK_SIZE_BND ];

#define tid gl_LocalInvocationID.x
void main() {
    IFANY (bvhBlockTop.leafCount <= 0) return;
    const uint gridSize = (gl_WorkGroupSize.x<<1u) * gl_NumWorkGroups.x;
    const uint tcount = max( bvhBlockTop.leafCount, 2u );

    // 
    sdata[tid] = bbox_t(INFINITY.xxxx, -INFINITY.xxxx);
    LGROUP_BARRIER;

    // calculate boxes for per work
    uint i = gl_WorkGroupID.x * (gl_WorkGroupSize.x<<1u) + tid;
    while (i < tcount) {
        sdata[tid] = bbox_tunion3(sdata[tid], getMinMaxPrimitive(i), getMinMaxPrimitive(i + gl_WorkGroupSize.x)), i += gridSize;
    };
    
    // shared reduction
    const uint WRc = Wave_Size_RT>>1u;
    [[unroll]] for (uint ki=(gl_WorkGroupSize.x>>1u);ki>WRc;ki>>=1) {
        LGROUP_BARRIER;
        if (tid < ki) { 
            bbox_t bound = sdata[tid], opbound = sdata[tid + ki];
            sdata[tid] = bbox_tunion(bound, opbound);
        };
    };

    // store in global memory result of work
    LGROUP_BARRIER;
    const vec4 mn = subgroupMin(sdata[tid].mn), mx = subgroupMax(sdata[tid].mx);
    if (tid == 0) {
        minmax[gl_WorkGroupID.x*2 + 0] = mn;
        minmax[gl_WorkGroupID.x*2 + 1] = mx;
    };
};
