#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXPERIMENTAL_INSTANCING_SUPPORT
#define USE_FAST_INTERSECTION
#define ENABLE_VSTORAGE_DATA
#define BVH_CREATION
#define LEAF_GEN

#ifndef INTEL_PLATFORM
#define PREFER_64BIT_MORTON_TYPE
#endif

#include "../../include/driver.glsl"
#include "../../include/mathlib.glsl"
#include "../../include/ballotlib.glsl"
#include "../../include/structs.glsl"
#include "../../include/vertex.glsl"
#include "../../include/morton.glsl"
#include "../include/bvh-inputs.glsl"

LOCAL_SIZE_LAYOUT;

#define wsize buildBlock.primitiveCount

layout ( binding = 3, set = VTX_SET, align_ssbo ) readonly buffer VTX_BUFFER_IN { f32vec4 data[]; } lvtxIn[];

void main() {
    IFANY (wsize <= 0) return; const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 2097152u);
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        const uint to = (w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x; IFALL (to >= wsize) break;
        const uint tri = buildBlock.primitiveOffset+clamp(to, 0, buildBlock.primitiveCount-1);
        const mat3x4 triverts = mat3x4(
            divW(mult4(bvhBlockTop.transform, lvtxIn[0].data[tri*3+0])),
            divW(mult4(bvhBlockTop.transform, lvtxIn[0].data[tri*3+1])),
            divW(mult4(bvhBlockTop.transform, lvtxIn[0].data[tri*3+2]))
        );
        [[unroll]] for (int i=0;i<3;i++) lvtx[0].data[tri*3+i] = triverts[i];
        Leafs[to].lbox = calcTriBox(triverts), Leafs[to].pdata = ivec4((0).xxx, tri+1);
    };
};
