#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXPERIMENTAL_INSTANCING_SUPPORT
#define VRT_USE_FAST_INTERSECTION
#define ENABLE_VSTORAGE_DATA
#define BVH_CREATION
#define LEAF_GEN

#ifndef INTEL_PLATFORM
#define PREFER_64BIT_MORTON_TYPE
#endif

#include "../../include/driver.glsl"
#include "../../include/mathlib.glsl"
#include "../../include/ballotlib.glsl"
#include "../../include/structs.glsl"
#include "../../include/vertex.glsl"
#include "../../include/morton.glsl"
#include "../include/bvh-inputs.glsl"

LOCAL_SIZE_LAYOUT;

#define wsize bvhBlockTop.leafCount
//#define lbox Leafs[to].lbox

void main() {
    IFANY (wsize <= 0) return; const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 2097152u);
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        const uint to = (w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x; IFALL (to >= wsize) break;
        const uint tri = buildBlock.primitiveOffset+clamp(to, 0, buildBlock.primitiveCount-1);
        [[flatten]] if (to < wsize && to >= 0) { // planned dedidcated geometry re-calculator when will ESC support 
#ifdef EXPERIMENTAL_UNORM16_BVH
            const mat3x4 triverts = mat3x4(uniteBoxTop(lvtx[0].data[tri*3+0]), uniteBoxTop(lvtx[0].data[tri*3+1]), uniteBoxTop(lvtx[0].data[tri*3+2])); // incarnated mode 
#else
            const mat3x4 triverts = mat3x4(lvtx[0].data[tri*3+0], lvtx[0].data[tri*3+1], lvtx[0].data[tri*3+2]); // incarnated mode 
#endif

            {
#ifndef VRT_USE_FAST_INTERSECTION
                const mat4x3 triverts = transpose(triverts);
                [[unroll]] for (int i=0;i<3;i++) lvtx[0].data[tri*3+i] = point4(triverts[i]);
#else
#ifdef VTX_USE_MOLLER_TRUMBORE
                lvtx[0].data[tri*3+0] = -triverts[0];
#ifndef EXPERIMENTAL_UNORM16_BVH
                [[unroll]] for (int i=1;i<3;i++) lvtx[0].data[tri*3+i] = triverts[i]-triverts[0];
#endif
#else

                // experimental coordinate transform of triangle
                // http://jcgt.org/published/0005/03/03/paper.pdf
                
                // triangle elements
                const mat3 vc = mat3(triverts[0].xyz, triverts[1].xyz, triverts[2].xyz);
                const vec3 e1 = (triverts[1] - triverts[0]).xyz, e2 = (triverts[2] - triverts[0]).xyz;
                const vec3 nl = cross(e1, e2), ni = 1.f/nl, na = abs(nl);
                
                // pre-calculate vectors
                const vec3 v0n = -dot(vc[0], nl).xxx*ni, v1n = cross(vc[0], vc[1])*ni, v2n = cross(vc[2], vc[0])*ni;
                const vec3 e2d = e2.zxy*ni, e2m = -e2.yzx*ni, e1d = e1.yzx*ni, e1m = -e1.zxy*ni, n1f = nl.yzx*ni, n2f = nl.zxy*ni;
                
                mat4x3 TVI = { vec3(0.f, 0.f, 0.f), vec3(0.f, 0.f, 0.f), vec3(0.f, 0.f, 0.f), vec3(0.f, 0.f, 0.f) };
                [[flatten]] if ( na.x >= na.y && na.x >= na.z ) {
                    TVI[0] = vec3(0.f,0.f,1.f);
                    TVI[1] = vec3(e2d.x,e1m.x,n1f.x);
                    TVI[2] = vec3(e2m.x,e1d.x,n2f.x);
                    TVI[3] = vec3(v2n.x,v1n.x,v0n.x);
                } else 
                [[flatten]] if ( na.y >= na.z ) {
                    TVI[0] = vec3(e2m.y,e1d.y,n2f.y);
                    TVI[1] = vec3(0.f,0.f,1.f);
                    TVI[2] = vec3(e2d.y,e1m.y,n1f.y);
                    TVI[3] = vec3(v2n.y,v1n.y,v0n.y);
                } else 
                {
                    TVI[0] = vec3(e2d.z,e1m.z,n1f.z);
                    TVI[1] = vec3(e2m.z,e1d.z,n2f.z);
                    TVI[2] = vec3(0.f,0.f,1.f);
                    TVI[3] = vec3(v2n.z,v1n.z,v0n.z);
                }
                
                // get transposed version (for full-filling)
                const mat3x4 TVIt = transpose(TVI);
                [[unroll]] for (int i=0;i<3;i++) lvtx[0].data[tri*3+i] = TVIt[i];
#endif
#endif
            };

            // unit mode 
#ifdef EXPERIMENTAL_UNORM16_BVH
            const vec4 sceneMin = -1.f.xxxx, sceneMax = 1.f.xxxx, sceneRes = sceneMax - sceneMin, sdiv = 1.f.xxxx;
            const bbox_t lbox = bbox_t(uniteBoxTop(Leafs[to].lbox.mn)*sdiv, uniteBoxTop(Leafs[to].lbox.mx)*sdiv);
#else
            const vec4 sceneMin = bvhBlockTop.sceneMin, sceneMax = bvhBlockTop.sceneMax, sceneRes = sceneMax - sceneMin, sdiv = 1.f.xxxx;
            const bbox_t lbox = Leafs[to].lbox;
#endif

            vec4 bcenter = vector4((triverts[0] + triverts[1] + triverts[2]) * 0.33333333333333f);
            bcenter = (bcenter - sceneMin) / (sceneRes), bcenter.w = sqlen((lbox.mx-lbox.mn).xyz)/sqlen((sceneRes).xyz);


            // store leaf data
            {
                // re-arrange box
                Leafs[to].lbox = lbox;
                
                // save morton codes 
    #ifdef USE_MORTON_32
                Mortoncodes[to] = encodeMorton(packUnorm4x8(bcenter));
    #else
                Mortoncodes[to] = encodeMorton(uvec2(packUnorm2x16(bcenter.xy), packUnorm2x16(bcenter.zw)));
    #endif

                MortoncodesIndices[to] = int(to+1);
            };
        };
    };
};
