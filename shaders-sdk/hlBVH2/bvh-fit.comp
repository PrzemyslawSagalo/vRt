#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXPERIMENTAL_INSTANCING_SUPPORT
#define BVH_CREATION

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/vertex.glsl"
#include "./include/bvh-inputs.glsl"


// optimize by shareds
void unifyNodeBox(inout int idx) {
    // initial for unify box
    const ivec2 comp = bvhNodes[idx].meta.xy-1;
    [[flatten]] if (comp.x != comp.y && comp.x >= 0) {

        // get contributors boxes
        mat4 lrbox = mat4(bvhBoxesWork[comp.x][0], bvhBoxesWork[comp.x|1][0], bvhBoxesWork[comp.x][1], bvhBoxesWork[comp.x|1][1]);

        // contribute to current node
        bvhBoxesWork[idx] = vec4[2](min(lrbox[0], lrbox[1]), max(lrbox[2], lrbox[3]));

        // transposed save
        const fvec4_ f4Correct = fvec4_(-(fpCorrect).xx, (fpCorrect).xx);
        lrbox = transpose(lrbox), bvhNodes[idx].cbox = 
#ifdef EXPERIMENTAL_UNORM16_BVH
            uvec2[3](packSnorm4x16(lrbox[0]+f4Correct), packSnorm4x16(lrbox[1]+f4Correct), packSnorm4x16(lrbox[2]+f4Correct));
#else
#if (defined(USE_F32_BVH)||defined(USE_F16_BVH))
            fvec4_[3](fvec4_(lrbox[0])+f4Correct, fvec4_(lrbox[1])+f4Correct, fvec4_(lrbox[2])+f4Correct);
#else
            uvec2[3](packHalf4x16(lrbox[0]+f4Correct), packHalf4x16(lrbox[1]+f4Correct), packHalf4x16(lrbox[2]+f4Correct));
#endif
#endif
    }
}

//layout ( local_size_x = WORK_SIZE_BND ) in;
LOCAL_SIZE_LAYOUT;
#define lID gl_LocalInvocationID.x
#define gS gl_WorkGroupSize.x
#define wsize bvhBlockTop.elementsCount

// referable value
const int _NULL = -1;

void main() {
    IFANY (wsize <= 0) return; const uint rng = gS*gl_NumWorkGroups.x;
    for (uint w=gS*gl_WorkGroupID.x;w<wsize;w+=rng) {
        const uint globalID = (w + lID); IFALL (globalID >= wsize) break; // add to queue list parent node
               int idx = globalID < wsize ? LeafIndices[globalID]-1 : -1;
        [[dependency_infinite]] for (uint l=0u;l<131072u;l++) {
            [[flatten]] if ( idx < 0 || idx == _NULL ) { break; };
            const int pid = (idx >= 0 ? bvhNodes[idx].meta.z : 0)-1; idx = _NULL;
            [[flatten]] if ( pid >= 0 ) { int ecp = 0; ecp = atomicCompSwap(Flags[pid], 0, 1); idx = (ecp == 1 && ecp != 0) ? pid : _NULL; } else { idx = _NULL; };
            [[flatten]] if ( idx >= 0 ) { unifyNodeBox(idx); atomicCompSwap(Flags[idx], 1, 0); };
        }
    }
}
