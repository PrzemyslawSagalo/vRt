#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXPERIMENTAL_INSTANCING_SUPPORT

#define ENABLE_VERTEX_INTERPOLATOR
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

#define EXTEND_LOCAL_GROUPS
//#define WORK_SIZE 64u


#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/vertex.glsl"


#define rayID (hit.rayID-1)
#define r4ID (rayID<<2)
#define cray rays[rayID]
#define hit hits[hitID]


#include "../include/attribute.glsl"


LOCAL_SIZE_LAYOUT;

// TODO: support of custom attribute shaders 
void main() {
    const uint wsize = min(closestHitCounterCurrent, MAX_HITS); IFANY (wsize <= 0) return;
    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);

    // accumulate closest hits
    [[flatten]] if (gl_GlobalInvocationID.x == 0 && gl_GlobalInvocationID.y == 0) { atomicAdd(closestHitCounter, closestHitCounterCurrent); }
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        const int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        const bool overflow = globalID >= wsize; IFALL(overflow) break;
        const int hitID = overflow ? -1 : vtClosestId(stageUniform.closestHitOffset + globalID, -1);
        [[flatten]] if (!overflow && hitID >= 0) { // verify intersection
            // interpolate hit
            const int triID = floatBitsToInt(hit.uvt.w)-1; INSTANCE_ID = floatBitsToInt(hit.hitVD.w);
            [[flatten]] if (triID >= 0 && INSTANCE_ID >= 0) {
                hit.uvt.w = intBitsToFloat(vmaterials[triID]); // set material ID to UVT (for backward compatibility)
                hit.hitVD = TLOAD(lnrm, triID); // pick-up pre-computed physical normal
#ifdef EXPERIMENTAL_INSTANCING_SUPPORT
                hit.hitVD.xyz = mult4(bvhInstance.transformIn, vec4(hit.hitVD.xyz, 0.f)).xyz; // get correct transformation from instance 
#endif

                // additional hit data (18.10.2018)
                hit.tdat.xyzw = uvec4(triID, INSTANCE_ID, 0u.xx);

                // store minimal possible hit (first operation required, because MAX will haven't no effect)
                // required for correct alpha channels support 
                imageAtomicCompSwap(rayLink,r4ID|2,0xFFFFFFFFu,hitID+1), imageAtomicMax(rayLink,r4ID|2,hitID+1);
                interpolateMeshData(hitID, triID); // 
            };

            // re-group hit 
            const lowp uint rID = floatBitsToUint(hit.hitVD.w);
            [[unroll]] for (lowp int i=0;i<4;i++) { [[flatten]] if (rID == i) { vtVerifyClosestHit(hitID, i); break; }; };
        };
    };
};
