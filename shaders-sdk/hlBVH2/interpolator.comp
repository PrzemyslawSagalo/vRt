#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXPERIMENTAL_INSTANCING_SUPPORT

#define ENABLE_VERTEX_INTERPOLATOR
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

//#define EXTEND_LOCAL_GROUPS

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/vertex.glsl"


#define rayID (hit.rayID-1)
#define r4ID int((RPG_OFF+rayID)<<2)
#define cray rays[RPG_OFF+rayID]
#define hit hits[HPG_OFF+hitID]


#include "../include/attribute.glsl"

LOCAL_SIZE_LAYOUT;

// can be replaced by custom interpolation shader with custom vertex assembly pipeline
void main() {
    const uint wsize = min(closestHitCounterCurrent[WID], MAX_HITS); IFANY (wsize <= 0) return;
    //const uint wsize = min(uint(rayTypedCounterRead[stageUniform.currentGroup][WID]), uint(MAX_RAYS)); IFANY (wsize <= 0) return; // TODO: dedicated ray counter 
    const uint wcount = min(tiled(uint(wsize)*4u, gl_WorkGroupSize.x), 2097152u);
    const uint hitGroupDirection = 0u;

    // accumulate closest hits
    [[flatten]] if (gl_GlobalInvocationID.x == 0) {
        {closestHitCounter[WID] += closestHitCounterCurrent[WID], closestHitTypedCounter[hitGroupDirection][WID] += closestHitCounterCurrent[WID];};
    };
    
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        const uint GPT4 = (w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x, IPC = GPT4&3, globalID = (GPT4>>2);

        const bool overflow = globalID >= wsize; IFALL(overflow) break;
        //const int hitID = overflow ? -1 : vtClosestId(stageUniform.closestHitOffset + globalID, -1);
        const int hitID = overflow ? -1 : vtClosestId(int(globalID), -1);
        [[flatten]] if (!overflow && hitID >= 0) { // verify intersection
            const int triID = hit.idat.y; INSTANCE_ID = hit.idat.x;
            [[flatten]] if (triID >= 0 && INSTANCE_ID >= 0) {
                interpolateMeshData(hitID, int(triID), int(IPC)); // interplate hit for every invocation
                [[flatten]] if (!overflow && IPC == 0) { // handle hit in every available invocation
                    //hit.uvt.w = intBitsToFloat(vmaterials[triID]); // set material ID to UVT (for backward compatibility)
                    hit.hitVD = lnrm[0].data[triID]; // pick-up pre-computed physical normal
#ifdef EXPERIMENTAL_INSTANCING_SUPPORT
                    hit.hitVD.xyz = mult4(bvhInstance.transformIn, vec4(hit.hitVD.xyz, 0.f)).xyz; // get correct transformation from instance 
#endif
                    hit.idat.z = vmaterials[triID];
                    // additional hit data (18.10.2018)
                    //hit.idat.xyzw = ivec4(INSTANCE_ID, triID, (-1).xx);

                    // store minimal possible hit (first operation required, because MAX will haven't no effect)
                    // required for correct alpha channels support 
                    //imageAtomicCompSwap(rayLink,r4ID|2,0xFFFFFFFFu,hitID+1), imageAtomicMax(rayLink,r4ID|2,hitID+1);
                    imageAtomicMax(rayLink,r4ID,(hitID+1).x);

                    //const lowp uint rID = floatBitsToUint(hit.hitVD.w);
                    //[[unroll]] for (lowp int i=0;i<4;i++) { [[flatten]] if (rID == i) { vtVerifyClosestHit(hitID, i); break; }; };
                    closestHits[((1+hitGroupDirection)*(2*MAX_HITS)) + HPG_OFF + globalID] = hitID+1;
                    //vtVerifyClosestHit(hitID, 0); // use only one hit group (fast-mode)
                };
            };
        };
    };
};
