#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXPERIMENTAL_INSTANCING_SUPPORT
#define VRT_USE_FAST_INTERSECTION
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

#define EXTEND_LOCAL_GROUPS

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/vertex.glsl"


#include "./include/bvh-traverse-task.glsl"
#define wgs gl_NumWorkGroups.x
#define rayIDh taskCode.x
#define instanceID taskCode.y
#define hid it
#define r4ID (rayIDh<<2)
#define hit hits[hid]


LOCAL_SIZE_LAYOUT;

void main() {
    IFANY (bvhBlockIn.primitiveCount <= 0) return;
    const uint wsize = min(rayCounter, MAX_RAYS); IFANY (wsize <= 0) return;
    const uint wcount = min(tiled(wsize, gl_WorkGroupSize.x), 1000000u);

    // planned task-based BVH traversing (for two-level BVH support)
    for (uint w=0;w<wcount;w+=wgs) {
        const int it = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        const bool overflow = it >= wsize; IFALL(overflow) break;
        const ivec2 taskCode = vtFetchTask(it); // get task codes 
        
        traverseState.maxElements = bvhBlockIn.primitiveCount;
        primitiveState.lastIntersection = vec4(0.f.xx, INFINITY, FINT_ZERO), traverseState.diffOffset = 0.f;
        INSTANCE_ID = instanceID;

        // planned multiple-hits support
        [[flatten]] if (!overflow) { // verify intersection
            const dirtype_t _direction = rays[rayIDh].cdirect;
            const vec3 _position = rays[rayIDh].origin.xyz;
            initTraversing(!overflow, vtFetchHitIdc(rayIDh), _position, _direction);

            // traversing from front layer to back layers
            int ftrID = -1; // current found triangle
            [[flatten]] if (traverseState.maxElements > 0) {
                traverseBVH2(false, !overflow);
                ftrID = floatBitsToInt(primitiveState.lastIntersection.w)-1, traverseState.maxElements = min(traverseState.maxElements, ftrID);
            };
            
            // resolve closest hit 
            const uint chit = hid+1; // last possible found hit
            [[flatten]] if (chit > 0) {
                hit.payloadID = 0, hit.rayID = rayIDh+1;
                hit.uvt = primitiveState.lastIntersection;
                hit.vdat = 0.f.xxxx;
                
                const uint lhit = imageAtomicMax(rayLink,r4ID,chit.x);
                [[flatten]] if ( chit > 0 && ftrID >= 0 ) {
                    hit.attribID = vtVerifyClosestHit(hid,-1)+1; } else 
                [[flatten]] if ( lhit <= 0 ) {
                    hit.attribID = 0; vtVerifyMissedHit(hid, 0); };
            };
        };
    };
    //LGROUP_BARRIER;
};
