#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXPERIMENTAL_INSTANCING_SUPPORT
#define BVH_CREATION
#define LEAF_GENs

#ifndef INTEL_PLATFORM
#define PREFER_64BIT_MORTON_TYPE
#endif

#include "../../include/driver.glsl"
#include "../../include/mathlib.glsl"
#include "../../include/ballotlib.glsl"
#include "../../include/structs.glsl"
#include "../../include/vertex.glsl"
#include "../../include/morton.glsl"
#include "../include/bvh-inputs.glsl"

LOCAL_SIZE_LAYOUT;

#define wsize buildBlock.primitiveCount

// re-calculate box after transforming 
bbox_t calculateTransformedBox(in uint rI, in vec4 bnds[2]){
    vec3 tmin = INFINITY.xxx, tmax = -INFINITY.xxx;
    [[unroll]] for (int x=0;x<2;x++) { [[unroll]] for (int y=0;y<2;y++) { [[unroll]] for (int z=0;z<2;z++) {
        const vec3 point = divW(mult4(bvhBlockTop.transform, divW(mult4(bvhInstance_[rI].transformIn, vec4(bnds[x].x,bnds[y].y,bnds[z].z,1.f))))).xyz;
        tmin = min(tmin, point), tmax = max(tmax, point);
    }}};

    bbox_t result;
    result.mn = vec4(tmin,0.f);
    result.mx = vec4(tmax,0.f);
    return result;
};

void main() {
    IFANY (wsize <= 0) return; const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        const uint I = (w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x, rI = buildBlock.primitiveOffset+I; IFALL (I >= wsize) break;
        [[flatten]] if (I < wsize) {
            const uint T = clamp(bvhInstance_[rI].bvhBlockID, 0, buildBlock.primitiveCount-1);

            // using global optimization transform + input transform of instance 
            Leafs[I].lbox  = calculateTransformedBox(rI, vec4[2](bvhBlockIn_[T].sceneMin, bvhBlockIn_[T].sceneMax));
            Leafs[I].pdata = ivec4((0).xxx, rI+1);

            // getting combined transformation for instance 
            bvhInstance_[rI].transform = transpose( transpose(bvhBlockIn_[T].transform) * inverse(mat4(transpose(bvhInstance_[rI].transformIn))) );
        };
    };
};
