#version 460 core
#extension GL_GOOGLE_include_directive : enable

// enable it, when you will ready...
#define ENABLE_STACK_SWITCH // still has glitches, when is enabled, will used unified stack (may no enough)
#define EXPERIMENTAL_INSTANCING_SUPPORT

#define VRT_USE_FAST_INTERSECTION
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

#define EXTEND_LOCAL_GROUPS
//#define WORK_SIZE 64u

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/vertex.glsl"

#include "./state-based/bvh-traverse-core.glsl"

#define wgs gl_NumWorkGroups.x
#define r4ID (rayID<<2)
#define hit hits[hid]


LOCAL_SIZE_LAYOUT;

void main() {
    const uint wsize  = min(rayCounter, MAX_RAYS); [[flatten]] IFANY (wsize <= 0) return;
    const uint wcount = min(tiled(wsize, gl_WorkGroupSize.x), 2097152u);

    // planned task-based BVH traversing (for two-level BVH support)
    for (uint w=0;w<wcount;w+=wgs) {
        const int it = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x), rayID = vtRayIdx(it);
        const bool overflow = it >= wsize; IFALL(overflow) break;

        // planned multiple-hits support
        ORIGINAL_ORIGIN = rays[rayID].origin.xyz, ORIGINAL_DIRECTION = rays[rayID].cdirect;
        //currentState = BVH_STATE_TOP, traverseState.idx = -1, traverseState.maxElements = int(!overflow) * 0x7FFFFFFF, primitiveState.lastIntersection = vec4(0.f.xx, INFINITY, FINT_ZERO);
        traverseState.maxElements = int(!overflow) * 0x7FFFFFFF, primitiveState.lastIntersection = vec4(0.f.xx, INFINITY, FINT_ZERO);

        [[flatten]] if (!overflow && rayID >= 0) {
            //int hid = vtFetchHitIdc(rayID), mhit = hid+1; bool found = false; // last possible found hit
            int hid = it;//vtFetchHitIdc(rayID);

            //[[flatten]] if (hid < 0) hid = rayID;
            //[[unroll]] for (int i=0;i<1;i++) { //[[flatten]] if (i == 0 || found) 
                {
                    traverseState.defElementID = -1, traverseState.idx = bvhBlockTop.entryID, lstack[traverseState.stackPtr = 0] = -1, traverseState.pageID =  0, 
                    traverseState.saved = false, traverseState.idxTop = -1, traverseState.stackPtrTop = 0, traverseState.pageIDTop = -1;
                };

                // traversing triangles
                const int ftrID = traverseBVH2(true)-1; // current found triangle
                //traverseState.maxElements = min(traverseState.maxElements, ftrID);

                { // resolve hit result 
                    //[[flatten]] if (hid < 0) hid = atomicIncHitCount();
                    hit.rayID = rayID+1, hit.attribID = 0, hit.payloadID = 0;
                    hit.hitVD = vec4(0.f.xxx, intBitsToFloat(LAST_INSTANCE));
                    hit.uvt = primitiveState.lastIntersection;//, primitiveState.lastIntersection.w = FINT_ZERO;
                    
                    imageAtomicMax(rayLink,r4ID,(hid+1).x);
                    [[flatten]] if ( ftrID >= 0 ) 
                        { hit.attribID = vtVerifyClosestHit(hid,-1)+1; }
                    else
                    //[[flatten]] if ( ftrID < 0 ) 
                        { hit.attribID = 0;vtVerifyMissedHit(hid,0)+1; };

                    /*
                    const uint lhit = imageAtomicMax(rayLink,r4ID,(hid+1).x);
                    [[flatten]] if ( ftrID >= 0 ) 
                        { hit.attribID = vtVerifyClosestHit(hid,-1)+1; found = true; }; 
                    [[flatten]] if ( !found && lhit == mhit ) 
                        { hit.attribID = 0;vtVerifyMissedHit(hid,0)+1; };
                    {mhit=max(mhit,hid+1),hid=-1;};
                    */
                };
            //};//};
        };
    };
};
