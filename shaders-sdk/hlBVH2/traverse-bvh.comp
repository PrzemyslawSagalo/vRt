#version 460 core
#extension GL_GOOGLE_include_directive : enable

// enable it, when you will ready...
#define ENABLE_STACK_SWITCH // still has glitches, when is enabled, will used unified stack (may no enough)
#define EXPERIMENTAL_INSTANCING_SUPPORT

#define VRT_USE_FAST_INTERSECTION
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

#define EXTEND_LOCAL_GROUPS
//#define WORK_SIZE 64u

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/vertex.glsl"

#include "./state-based/bvh-traverse-core.glsl"

#define wgs gl_NumWorkGroups.x
#define r4ID (rayID<<2)
#define hit hits[hid]


LOCAL_SIZE_LAYOUT;

void main() {
    const uint wsize = min(rayCounter, MAX_RAYS); IFANY (wsize <= 0 || bvhBlockTop.primitiveCount <= 0) return;
    const uint wcount = min(tiled(wsize, gl_WorkGroupSize.x), 1000000u);

    // planned task-based BVH traversing (for two-level BVH support)
    for (uint w=0;w<wcount;w+=wgs) {
        const int it = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x), rayID = vtRayIdx(it);
        const bool overflow = it >= wsize; IFALL(overflow) break;

        //
        primitiveState.lastIntersection = vec4(0.f.xx, INFINITY, FINT_ZERO), traverseState.maxElements = !overflow ? 0x7FFFFFFF : 0;
        
        // planned multiple-hits support
        [[flatten]] if (!overflow) { // verify intersection
            ORIGINAL_DIRECTION = rays[rayID].cdirect;
            ORIGINAL_ORIGIN = rays[rayID].origin.xyz;

            // traversing from front layer to back layers
            int hid = vtFetchHitIdc(rayID), mhit = hid+1; bool found = mhit > 0u; // last possible found hit
            [[flatten]] if (found) primitiveState.lastIntersection = hits[hid].uvt;
            [[unroll]] for (int i=0;i<1;i++) {
                {
                    currentState = uint(bvhBlockTop.primitiveCount > 1), INSTANCE_ID = 0, LAST_INSTANCE = 0;
                    traverseState.entryIDBase = (!overflow ? bvhBlockTop.entryID : -1), traverseState.idx = traverseState.entryIDBase, traverseState.diffOffset = floatBitsToInt(0.f), 
                    traverseState.defElementID = 0, traverseState.stackPtr = 0, traverseState.pageID = 0, traverseState.saved = bvhBlockTop.primitiveCount <= 1;
                    traverseState.idxTop = traverseState.idx, traverseState.stackPtrTop = 0, traverseState.pageIDTop = -1;
                };

                // traversing triangles
                const int ftrID = traverseBVH2(true)-1; // current found triangle
                traverseState.maxElements = min(traverseState.maxElements, ftrID);

                // handle hit result 
                const bool has = ftrID >= 0;
                [[flatten]] if (has) found = true;
                [[flatten]] if (i == 0 || has) 
                { // resolve hit result 
                    [[flatten]] if (hid < 0) hid = atomicIncHitCount(); // if required new
                    hit.payloadID = 0, hit.rayID = rayID+1, hit.uvt = primitiveState.lastIntersection; primitiveState.lastIntersection.w = FINT_ZERO;
                    hit.vdat = 0.f.xxxx, hit.vdat.w = intBitsToFloat(LAST_INSTANCE);
                    
                    const uint lhit = imageAtomicMax(rayLink,r4ID,(hid+1).x);
                    [[flatten]] if ( has ) 
                        { hit.attribID = vtVerifyClosestHit(hid,-1)+1; } else 
                    [[flatten]] if ( !found && lhit <= 0 && lhit == mhit ) 
                        { hit.attribID = 0;vtVerifyMissedHit(hid,0)+1; };
                    
                    {mhit=max(mhit,hid+1);hid=-1;};
                };
                
            };
        };
    };
};
