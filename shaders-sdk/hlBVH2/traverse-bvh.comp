#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define VRT_USE_FAST_INTERSECTION
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

#define EXTEND_LOCAL_GROUPS

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/vertex.glsl"
#include "./include/bvh-traverse-task.glsl"

#define wgs gl_NumWorkGroups.x
#define r4ID (rayID<<2)
#define hit hits[hid]


LOCAL_SIZE_LAYOUT;

void main() {
    IFANY (bvhBlock.primitiveCount <= 0) return;
    const uint wsize = min(rayCounter, MAX_RAYS); IFANY (wsize <= 0) return;
    const uint wcount = min(tiled(wsize, gl_WorkGroupSize.x), 1000000u);

    // planned task-based BVH traversing (for two-level BVH support)
    for (uint w=0;w<wcount;w+=wgs) {
        const int it = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        const bool overflow = it >= wsize; IFALL(overflow) break;

        // do BVH traversing 
        int rayID = vtRayIdx(it), hid = vtFetchHitIdc(rayID);
        traverseState.maxElements = bvhBlock.primitiveCount;
        primitiveState.lastIntersection = vec4(0.f.xx, INFINITY, FINT_ZERO);

        // planned multiple-hits support
        [[flatten]] if (!overflow) { // verify intersection
            const dirtype_t _direction = rays[rayID].cdirect;
            const vec3 _position = rays[rayID].origin.xyz;
            initTraversing(!overflow, hid, _position, _direction);

            // traversing from front layer to back layers
            uint mhit = hid+1; bool found = mhit > 0u; // last possible found hit
            [[unroll]] for (int i=0;i<1;i++) {

                // traversing triangles
                int ftrID = -1; // current found triangle
                [[flatten]] if (traverseState.maxElements > 0) {
                    traverseBVH2(i > 0, !overflow);
                    ftrID = floatBitsToInt(primitiveState.lastIntersection.w)-1, traverseState.maxElements = min(traverseState.maxElements, ftrID);
                };
                found = found || ftrID >= 0;

                { // resolve hit result 
                    [[flatten]] if (hid < 0) hid = atomicIncHitCount(); // if required new
                    hit.payloadID = 0, hit.rayID = rayID+1;
                    hit.uvt = primitiveState.lastIntersection;
                    hit.vdat = 0.f.xxxx;
                    
                    const uint lhit = imageAtomicMax(rayLink,r4ID,(hid+1).x);
                    [[flatten]] if ( ftrID >= 0) 
                        { hit.attribID = vtVerifyClosestHit(hid,-1)+1; } else 
                    [[flatten]] if ( !found && lhit <= 0 && lhit == mhit ) 
                        { hit.attribID = 0;vtVerifyMissedHit(hid,0)+1; };
                    
                    {mhit=max(mhit,hid+1);hid=-1;};
                    primitiveState.lastIntersection.w = FINT_ZERO;
                };
            };
        };
    };
};
