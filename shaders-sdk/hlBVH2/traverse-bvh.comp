#version 460 core
#extension GL_GOOGLE_include_directive : enable

// enable it, when you will ready...
#define IS_TRAVERSING
#define ENABLE_STACK_SWITCH // still has glitches, when is enabled, will used unified stack (may no enough)
#define EXPERIMENTAL_INSTANCING_SUPPORT

#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

//#define WORK_SIZE 128u
  #define EXTEND_LOCAL_GROUPS

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/vertex.glsl"

#include "./state-based/bvh-traverse-core.glsl"

#define wgs gl_NumWorkGroups.x
#define r4ID int((RPG_OFF+RAY_ID)<<2)
#define hit hits[HPG_OFF+hid]


LOCAL_SIZE_LAYOUT;

void main() {
    const uint wsize = min(uint(rayTypedCounterRead[stageUniform.currentGroup][WID]), uint(MAX_RAYS)); IFANY (wsize <= 0) return; // TODO: dedicated ray counter 
    const uint wcount = min(tiled(wsize, gl_WorkGroupSize.x), 2097152u);

    // 
    //[[flatten]] if (subgroupElect()) 
    { topLevelEntry = readFLane(bvhBlockTop.elementsCount > 1 ? bvhBlockTop.entryID : -1), CACHE_ID = readFLane(gl_WorkGroupID.x*Wave_Count_RT+Wave_Idx); }; // should be subgroup uniform
    { traverseState.maxElements = 0x7FFFFFFF; };

    // planned task-based BVH traversing (for two-level BVH support)
    for (uint w=0;w<wcount;w+=wgs) {
        const int it = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x); const bool overflow = it >= wsize; IFALL(overflow) break;
        { RAY_ID = vtRayIdx(it), primitiveState.lastIntersection = vec4(0.f.xx, INFINITY, FINT_ZERO); };

        [[flatten]] if (!overflow && RAY_ID >= 0) {
            const int hid = it, ftrID = traverseBVH2(true)-1;
            {
                hit.rayID = RAY_ID+1, hit.attribID = 0, hit.payloadID = 0, hit.hitVD = 0.f.xxxx;
                hit.idat = ivec4(LAST_INSTANCE, ftrID, (-1).xx), hit.uvt = primitiveState.lastIntersection;
                [[flatten]] if ( ftrID >= 0 ) { hit.attribID = vtVerifyClosestHit(hid,-1)+1; } else 
                                              { hit.attribID = 0;vtVerifyMissedHit(hid,0)+1; };
            };
        };
    };
};
