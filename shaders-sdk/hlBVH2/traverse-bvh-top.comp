#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXPERIMENTAL_INSTANCING_SUPPORT
#define VRT_USE_FAST_INTERSECTION
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

#define EXTEND_LOCAL_GROUPS

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/vertex.glsl"


#include "./include/bvh-traverse-top.glsl"
#define wgs gl_NumWorkGroups.x
#define r4ID (rayID<<2)


LOCAL_SIZE_LAYOUT;

void main() {
    IFANY (bvhBlockTop.primitiveCount <= 0) return;
    const uint wsize = min(rayCounter, MAX_RAYS); IFANY (wsize <= 0) return;
    const uint wcount = min(tiled(wsize, gl_WorkGroupSize.x), 1000000u);

    // planned task-based BVH traversing (for two-level BVH support)
    for (uint w=0;w<wcount;w+=wgs) {
        const int it = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        const bool overflow = it >= wsize; IFALL(overflow) break;

        // do BVH traversing 
        const int rayID = vtRayIdx(it);
        traverseState.maxElements = bvhBlockTop.primitiveCount;
        primitiveState.lastIntersection = vec4(0.f.xx, INFINITY, FINT_ZERO), traverseState.diffOffset = 0.f;

        // planned multiple-hits support
        [[flatten]] if (!overflow) { // verify intersection
            const dirtype_t _direction = rays[rayID].cdirect;
            const vec3 _position = rays[rayID].origin.xyz;
            initTraversing(!overflow, vtFetchHitIdc(rayID), _position, _direction, rayID);

            // traversing from front layer to back layers
            [[unroll]] for (int i=0;i<1;i++) {
                [[flatten]] if (traverseState.maxElements > 0) traverseBVH2(false, !overflow); // top levels traversing 
            };
        };
    };
};
