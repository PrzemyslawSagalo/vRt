#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define BVH_PACKED_LOADER
#define BVH_CREATION

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/vertex.glsl"
#include "./submodules/includes.glsl"


LOCAL_SIZE_LAYOUT;

#define wsize bvhBlock.leafCount

void main() {
    IFANY (wsize <= 0) return; uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
         uint globalID = (w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
        IFALL (globalID >= wsize) break;

        // get leaf data
        int lidx = globalID < wsize ? LeafIndices[globalID]-1 : -1;
        ivec2 bvhmeta = (lidx >= 0 ? bvhNodes[lidx].meta.xy : (0).xx)-1;
        bbox_t rbox = {INFINITY.xxxx, -INFINITY.xxxx};

        // linking leafs
        int leafID = bvhmeta.x >= 0 ? MortoncodesIndices[bvhmeta.x]-1 : -1;
        if (leafID >= 0) {
            rbox = Leafs[leafID].lbox;
            bvhmeta.xy = Leafs[leafID].pdata.ww-1;
        };

        // save boxes
        if (lidx >= 0) {
            bvhNodes[lidx].meta.xy = bvhmeta+1;
            bvhBoxesWork[lidx][0] = rbox.mn;
            bvhBoxesWork[lidx][1] = rbox.mx;
        };
    }
    //LGROUP_BARRIER
}
