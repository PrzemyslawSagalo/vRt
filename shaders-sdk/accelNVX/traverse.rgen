#version 460 core
#extension GL_NV_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable

// enable it, when you will ready...
//#define RS_SET 1
#define ENABLE_STACK_SWITCH // still has glitches, when is enabled, will used unified stack (may no enough)
#define EXPERIMENTAL_INSTANCING_SUPPORT
//#define REGULAR_ATOMIC_INC

#define VRT_USE_FAST_INTERSECTION
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

#define EXTEND_LOCAL_GROUPS
//#define WORK_SIZE 64u

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"

struct VtCustomPayload {
     vec4 lastIntersection;
    ivec4 binaryData128;
};
#define LAST_INSTANCE primitiveState.binaryData128.x
#define LAST_INTERSECTION primitiveState.lastIntersection

layout (binding = 0, set = 1) uniform accelerationStructureNV accelStructure;
layout (location = 0) rayPayloadNV VtCustomPayload primitiveState;

#define r4ID (rayID<<2)
#define hit hits[hid]

layout(push_constant) uniform rayParams {
    uint sbtOffset, sbtStride, missIndex, r0;
};

void main() {
    // planned task-based BVH traversing (for two-level BVH support)
    const uint wsize = min(rayCounter, MAX_RAYS); [[flatten]] IFANY (wsize <= 0) return;
    for (uint Wi=0u;Wi<wsize;Wi+=gl_LaunchSizeNV.x) {
        const uint W = gl_LaunchIDNV.x + Wi;
        
        const int rayID = vtRayIdx(int(W)); const bool overflow = W >= wsize; IFALL(overflow) break;
        const vec3 ORIGINAL_ORIGIN = rays[rayID].origin.xyz; const dirtype_t ORIGINAL_DIRECTION = rays[rayID].cdirect;
        const uint rayFlags = gl_RayFlagsOpaqueNV, cullMask = !overflow ? 0xff : 0x00;
        [[flatten]] if (!overflow) {
            //LAST_INTERSECTION = vec4(0.f.xx, INFINITY, FINT_ZERO);
            traceNV(accelStructure, rayFlags, cullMask, sbtOffset, sbtStride, missIndex, ORIGINAL_ORIGIN, SFN, dcts(ORIGINAL_DIRECTION), INFINITY, 0);

            const int ftrID = floatBitsToInt(LAST_INTERSECTION.w)-1;

            //int hid = vtFetchHitIdc(rayID), mhit = hid+1; bool found = false; // last possible found hit
            int hid = int(W);//vtFetchHitIdc(rayID);

            { // resolve hit result 
                //[[flatten]] if (hid < 0) hid = atomicIncHitCount();
                //hid = atomicIncHitCount();
                
                hit.rayID = rayID+1, hit.attribID = 0, hit.payloadID = 0;
                hit.hitVD = vec4(0.f.xxx, uintBitsToFloat(LAST_INSTANCE));
                hit.tdat = (-1).xxxx, hit.uvt = LAST_INTERSECTION;
                
                //imageAtomicMax(rayLink,r4ID,(hid+1).x);
                [[flatten]] if ( ftrID >= 0 ) 
                    { hit.attribID = vtVerifyClosestHit(hid,-1)+1; }
                else
                //[[flatten]] if ( ftrID < 0 ) 
                    { hit.attribID = 0;vtVerifyMissedHit(hid,0)+1; };


                /*
                const uint lhit = imageAtomicMax(rayLink,r4ID,(hid+1).x);
                [[flatten]] if ( ftrID >= 0 ) 
                    { hit.attribID = vtVerifyClosestHit(hid,-1)+1; found = true; }; 
                [[flatten]] if ( !found && lhit == mhit ) 
                    { hit.attribID = 0;vtVerifyMissedHit(hid,0)+1; };
                
                {mhit=max(mhit,hid+1),hid=-1;};*/
            };
            
        };
    };
};
