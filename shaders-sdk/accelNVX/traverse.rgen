#version 460 core
#extension GL_NV_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable

// enable it, when you will ready...
//#define RS_SET 1
#define IS_RAY_SHADER
#define IS_RAY_GEN

#define ENABLE_STACK_SWITCH // still has glitches, when is enabled, will used unified stack (may no enough)
#define EXPERIMENTAL_INSTANCING_SUPPORT
//#define REGULAR_ATOMIC_INC

#define USE_FAST_INTERSECTION
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

#define EXTEND_LOCAL_GROUPS
//#define WORK_SIZE 64u

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"

struct VtCustomPayload { vec4 lastIntersection; ivec4 binaryData128; };
#define LAST_INSTANCE primitiveState.binaryData128.x
#define LAST_INTERSECTION primitiveState.lastIntersection

layout (binding = 0, set = 1) uniform accelerationStructureNV accelStructure;
layout (location = 0) rayPayloadNV VtCustomPayload primitiveState;
layout (push_constant) uniform rayParams { uint sbtOffset, sbtStride, missIndex, r0; };

#define r4ID int((RPG_OFF+rayID)<<2)
#define hit hits[HPG_OFF+hid]

void main() {
    const uint wsize = min(uint(rayTypedCounterRead[stageUniform.currentGroup][WID]), uint(MAX_RAYS)); IFANY (wsize <= 0) return; // TODO: dedicated ray counter 
    const uint tsize = (gl_LaunchSizeNV.x*gl_LaunchSizeNV.y), tWc = (gl_LaunchSizeNV.x*gl_LaunchIDNV.y+gl_LaunchIDNV.x);
    for (uint Wi=0u;Wi<wsize;Wi+=tsize) {
        const int it = int(tWc + Wi); const bool overflow = it >= wsize; IFALL(overflow) break;
        const int RAY_ID = vtRayIdx(it);
        
        [[flatten]] if (!overflow && RAY_ID >= 0) {
            traceNV(accelStructure, gl_RayFlagsOpaqueNV, !overflow ? 0xff : 0x00, sbtOffset, sbtStride, missIndex, rays[RPG_OFF+RAY_ID].origin.xyz, SFN, dcts(rays[RPG_OFF+RAY_ID].cdirect), INFINITY, 0);
            const int hid = it, ftrID = floatBitsToInt(LAST_INTERSECTION.w)-1;
            {
                hit.rayID = RAY_ID+1, hit.attribID = 0, hit.payloadID = 0, hit.hitVD = 0.f.xxxx;
                hit.idat = primitiveState.binaryData128, hit.uvt = LAST_INTERSECTION;
                [[flatten]] if ( ftrID >= 0 ) { hit.attribID = vtVerifyClosestHit(int(hid),-1)+1; } else 
                                              { hit.attribID = 0;vtVerifyMissedHit(int(hid),0)+1; };
            };
        };
    };
};
