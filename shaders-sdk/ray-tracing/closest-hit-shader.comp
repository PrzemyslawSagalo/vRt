#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define DISCARD_SHARED_CACHING
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DMA_HIT

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/morton.glsl"
#include "../include/random.glsl"


// sort alike "surface shaders" in Unity engines 
// getting only intersection material properties
// sending to next stage...


// attribute formating
const int NORMAL_TID = 0;
const int TEXCOORD_TID = 1;
const int TANGENT_TID = 2;
const int BITANGENT_TID = 3;
const int VCOLOR_TID = 4;

struct VtAppMaterial {
     vec4 diffuse;
     vec4 specular;
     vec4 transmission;
     vec4 emissive;

     float ior;
     float roughness;
     float alpharef;
     float unk0f;

     uint diffuseTexture;
     uint specularTexture;
     uint bumpTexture;
     uint emissiveTexture;

     int flags;
     int alphafunc;
     int binding;
     int bitfield;
};

#include "../include/hitlib.glsl"

layout (binding = 0, set = 2, std430) readonly buffer VT_GEN_EXAMPLE {
    mat4x4 camInv;
    mat4x4 projInv;
    vec4 sceneRes;
    int enable360, variant, r1, r2;
} cameraUniform;

// texturing cache 
struct Textured {
    vec4 diffuse;
    vec4 specular;
    vec4 bump;
    vec4 emissive;
} textured;


#define wgs gl_NumWorkGroups.x
#define rayID (hit.rayID-1)
#define r4ID (rayID<<2)
#define cray rays[rayID]


LOCAL_SIZE_LAYOUT;
VtHitPayload hitp;

void main() {
    
    // constants
    const float IOR = 1.3333f, sIOR = IOR;
    const float diffuse_min_importance = 0.5f;
    const float reflect_min_importance = 0.5f;
    const vec3 max_fresnel_color = vec3(1.f);
    const vec3 min_fresnel_color = vec3(1.f);

    const uint wsize = min(closestHitTypedCounterRead[stageUniform.currentGroup], MAX_HITS); IFANY (wsize <= 0) return;
    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    for (uint w=0;w<wcount;w+=wgs) {
        const int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        const bool overflow = globalID >= wsize || globalID < 0; IFALL(overflow) break;
        const int hitID = overflow ? -1 : vtClosestId(globalID, stageUniform.currentGroup);
        
#ifdef DMA_HIT
        #define hit hits[hitID]
#else
        VtHitData hit = hits[hitID];
#endif

        uint ghit = hitID+1u;
        [[flatten]] if (!overflow && rayID >= 0 && hitID >= 0) {
            hitp = hitPayload[hit.payloadID-1];
            globalInvocationSMP = globalID;

            matID = floatBitsToInt(hit.uvt.w);
            const bool overflow = overflow || rayID < 0;
            const vec3 rdirect = dcts(cray.cdirect);

            // AMD not supported per-lane texture data loading, if texture index is not constant
            const vec2 texcoord = imageLoad(attributes, makeAttribID(hit.attribID, TEXCOORD_TID)).xy;
            const vec3 normal = (imageLoad(attributes, makeAttribID(hit.attribID, NORMAL_TID)).xyz);
            const vec3 bitang = (imageLoad(attributes, makeAttribID(hit.attribID, BITANGENT_TID)).xyz);
            const vec3 tangent = (imageLoad(attributes, makeAttribID(hit.attribID, TANGENT_TID)).xyz);
            const mat3 tbn = mat3( (tangent.xyz), (bitang.xyz), (normal.xyz) );

            // get textured data
            textured.bump = getNormalMapping(texcoord);
            textured.diffuse  = toLinear(fetchDiffuse(texcoord));
            textured.specular = toLinear(fetchSpecular(texcoord));
            textured.emissive = toLinear(fetchEmission(texcoord));

            hitp.normalHeight.xyz = validateTexture(material.bumpTexture) ? (tbn * textured.bump.xyz) : normal.xyz; // apply TBN with normal mapping
            [[flatten]] if (dot(hitp.normalHeight.xyz,hitp.normalHeight.xyz) <= SFN) { hitp.normalHeight.xyz = normal.xyz; };
            
            const vec3 dnormal = normalize(normal);
            hitp.normalHeight.xyz = normalize(hitp.normalHeight.xyz); // normalize 
            hitp.normalHeight.xyz = faceforward(hitp.normalHeight.xyz, -dnormal.xyz, hitp.normalHeight.xyz);
            
            // convert metallic roughness to glossiness specular PBR model
            const vec3 faceNormal = faceforward(hitp.normalHeight.xyz, rdirect, dnormal);
            const float fresnel = clamp01(pow(abs(dot(rdirect, faceNormal)), sIOR - 1.f));
            const vec3 fresnelColor = clamp01(mix(min_fresnel_color * 0.02f, max_fresnel_color * 0.45f, 1.f-fresnel.xxx));
            const vec3 specularColor = clamp01(mix(fresnelColor, textured.diffuse.xyz, textured.specular.zzz)); // use correct specular
            const vec4 specularGlossiness = vec4(specularColor, textured.specular.y);
            
            // temporary solution - add emission to albedo
            hitp.emission = textured.emissive * mix(1.f-textured.diffuse,textured.diffuse,vec4(0.f.xxx,1.f));
            hitp.specularGlossiness = specularGlossiness; // set emission and specularity

            // TODO: dynamic light
            const vec3 lightVector = normalize(vec3(0.4f, 1.f, 0.1f)), lightColor = toLinear(vec3(1.0f, 0.9f, 0.75f));
            hitp.albedo = (textured.diffuse * vec4(  mix(lightColor*0.1f, lightColor*1.f, clamp(dot(hitp.normalHeight.xyz, lightVector), 0.f, 1.f).xxx), 1.f));
            hitp.albedo += vec4(hitp.emission.xyz * hitp.emission.a * hitp.albedo.w, 0.f);
            
            
            // z-fighting by hashing (if fail to alpha test, back layers will still showing)
            [[flatten]] if (hrand(uvec4( vtFetchCode(rayID), stageUniform.iteration, packSnorm4x16(vec4(rdirect, 0.f)) )) <= hitp.albedo.w) {
                const uint chit = hitID+1, ghit = imageAtomicMin(rayLink,r4ID,chit.x);
                [[flatten]] if (ghit >= chit && hit.uvt.z <= hits[ghit-1].uvt.z) { // also, required range checking for correct more results 
                    [[flatten]] if (imageAtomicMin(rayLink,r4ID|2,chit.x) >= chit) {
                        int pid = atomicIncPayloadHitCount();
                        hit.payloadID = pid+1;
#ifndef DMA_HIT
                        hits[hitID] = hit;
#endif
                        hitPayload[pid] = hitp;
                    };
                };
            };
        };
    };
};
