#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;

shared uint localHistogram[RADICES];

// wide of 128 elements, each element should be in uint16_t, but for compatibility used uint32_t
#ifdef PREFER_UNPACKED 
shared lowp uvec4 _data[Wave_Size];
#else
shared uint_rdc_wave_lcm _data[Wave_Size];
#endif

shared blocks_info blocks;
#define key _data[Lane_Idx]

//initSubgroupIncFunctionTarget(localHistogram[WHERE], countHistogram, 1, uint)

#define bcount blocks.count

void main() {
    const utype_t Radice_Idx = utype_t(gl_WorkGroupID.y * Wave_Count_RX + Wave_Idx);
    const lowp uint w = Wave_Idx; // should be reference, not register

    // clear histogram of block (planned distribute threads)
    [[unroll]] for (utype_t rk=utype_t(0u);rk<utype_t(RADICES);rk+=utype_t(WRK_SIZE_RT)) {
        const utype_t radice = utype_t(rk) + utype_t(Radice_Idx);
        [[flatten]] if (radice < RADICES) localHistogram[radice+0u] = 0u;
    };
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(push_block.NumKeys), bcount = min(blocks.count, 1048576u);
    LGROUP_BARRIER
    [[flatten]] IFANY (bcount <= 0) return;

    // use SIMD lanes for calculate histograms
    WPTR4 addr = WPTR4(0,1,2,3)*Wave_Size_RT.xxxx + WPTR4(blocks.offset.xxxx) + WPTR4(Lane_Idx.xxxx);
    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
        LGROUP_BARRIER

        const bvec4 validAddress = lessThan(addr, blocks.limit.xxxx); IFALL(all(not(validAddress))) break;
        [[flatten]] if (w < 4u) { key[w] = BFE(validAddress[w] ? KeyIn[addr[w]] : OutOfRange, (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS); };
        LGROUP_BARRIER

        // WARP-optimized histogram calculation
        [[unroll]] for (utype_t rk=utype_t(0u);rk<utype_t(RADICES);rk+=utype_t(WRK_SIZE_RT)) {
            const utype_t radice = utype_t(rk) + utype_t(Radice_Idx);
            const bvec4 owned = and(equal(utype_v(upfunc(key)), radice.xxxx), validAddress);
            [[unroll]] for (int w=0;w<4;w++) { [[flatten]] if (owned[w]) {
                const uint btc = subgroupAdd(1u);
                [[flatten]] if (subgroupElect()) localHistogram[radice+0u] += btc;
            }};
            IFALL (all(or((radice >= RADICES).xxxx, not(validAddress)))) break;
        };
        addr += ( Wave_Size_RT << 2u );
    };

    // resolve histograms (planned distribute threads) 
    LGROUP_BARRIER
    
    [[unroll]] for (utype_t rk=utype_t(0u);rk<utype_t(RADICES);rk+=utype_t(WRK_SIZE_RT)) {
         const utype_t radice = utype_t(rk) + utype_t(Radice_Idx);
         [[flatten]] if (radice < utype_t(RADICES)) {
            PrefixSum[RADICES * gl_WorkGroupID.x + radice] = localHistogram[radice+0u];
            Histogram[RADICES * gl_WorkGroupID.x + radice] = localHistogram[radice+0u];
         };
    };
};
