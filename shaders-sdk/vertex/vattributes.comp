#version 460 core
#extension GL_GOOGLE_include_directive : enable


//#define EXTEND_LOCAL_GROUPS
//#define USE_PUSH_CONSTANT
#define VERTEX_FILLING

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"

#include "../include/attribute.glsl"
#include "../include/vertex-input.glsl"




bool nvlda(in vec4 a) { return dot(a,a)<=SFN; };
bool nvlda(in vec3 a) { return dot(a,a)<=SFN; };
bool nvlda(in vec2 a) { return dot(a,a)<=SFN; };
void calculateAttributes(in int rofft, in int wofft, in mat3x4 transformNrm) {

    // alloc arrays
    vec4 normals[3] = {0.f.xxxx,0.f.xxxx,0.f.xxxx};
    vec4 tangent[3] = {0.f.xxxx,0.f.xxxx,0.f.xxxx};
    vec4 texcoord[3] = {0.f.xxxx,0.f.xxxx,0.f.xxxx};
    vec4 vertice[3] = {0.f.xxxx,0.f.xxxx,0.f.xxxx};

    // load attrib data
    for (uint a=vertexBlock.attributeOffset;a<min(min(ATTRIB_EXTENT, attributes.length()), vertexBlock.attributeCount)+vertexBlock.attributeOffset;a++) {
        const int ai = attributes[a].attributeID;
        [[unroll]] for (int i=0;i<3;i++) {
            vec4 attribValue = vec4(0.f); uint indiceID = rofft * VCOUNT + i;
            readByAccessorIndice(vertexBlock.indiceAccessor, indiceID, indiceID);
            readByAccessor(attributes[a].accessorID, indiceID, attribValue);
            storeAttribute(ivec3(wofft, ai, i), attribValue);
            [[flatten]] if (ai ==   NORMAL_TID) {  normals[i] = attribValue; };
            [[flatten]] if (ai ==  TANGENT_TID) {  tangent[i] = attribValue; };
            [[flatten]] if (ai == TEXCOORD_TID) { texcoord[i] = attribValue; };
        };
        storeAttribute(ivec3(wofft, ai, 3), 0.f.xxxx);
    };

    // get vertices
    [[unroll]] for (int i=0;i<3;i++) {
        uint indiceID = rofft * VCOUNT + i;
        readByAccessorIndice(vertexBlock.indiceAccessor, indiceID, indiceID);
        readByAccessor(vertexBlock.verticeAccessor, indiceID, vertice[i]);
    };

    // getting tangents and bitangents
    const mat3x2 dlts = mat3x2(texcoord[0].xy, texcoord[1].xy-texcoord[0].xy, texcoord[2].xy-texcoord[0].xy);
    const mat3x3 dlps = mat3x3(vertice[0].xyz, vertice[1].xyz-vertice[0].xyz, vertice[2].xyz-vertice[0].xyz);
    const vec4 gnormal = vec4(cross(dlps[1], dlps[2]), 0.f);

    // calculate geometrical normal
    [[unroll]] for (int i=0;i<3;i++) { if (nvlda(normals[i].xyz)) normals[i] = gnormal; };
    [[unroll]] for (int i=0;i<3;i++) {
        // calc raw TBN
        const float idet = 1.f/precIssue(determinant(mat2(dlts[1],dlts[2]))); // inv determinant
        vec3 T = fma(dlts[2].yyy, dlps[1], -dlts[1].y * dlps[2]), 
             B = fma(dlts[1].xxx, dlps[2], -dlts[2].x * dlps[1]), 
             N = normalize(normals[i].xyz);//, gN = normalize(gnormal.xyz); // pre-tbn
        
        { // orthonormalization process
            T -= N*dot(T,N);
            B -= N*dot(B,N);
            B -= T*dot(B,T);
            T*=idet,B*=idet;
        };

        // if none of native tangent, use generated
        [[flatten]] if (nvlda(tangent[i].xyz)) { tangent[i].xyz = T; } else { T = tangent[i].xyz, B = cross(N, T); };

        // if no valid generation 
        [[flatten]] if (nvlda(T)) {
            vec3 dirn = vec3(0.f, 0.f, 1.f);
            [[flatten]] if (abs(N.x) < SQRT_OF_ONE_THIRD) dirn = vec3(1.f, 0.f, 0.f);
            [[flatten]] if (abs(N.y) < SQRT_OF_ONE_THIRD) dirn = vec3(0.f, 1.f, 0.f);
            T = cross(N, dirn), B = cross(N, T);
        };

        // correction of bitangent and sign 
        [[flatten]] if (nvlda(B)) { B = cross(N, T); };

        // transform and store TBN
        const vec3 fT = T, fB = (B * sign(sign(tangent[i].w)-SFN)), fN = N;
        ISTORE(attrib_texture_out, mosaicIdc(gatherMosaic(getUniformCoord(wofft*ATTRIB_EXTENT+   NORMAL_TID)), i), vec4( normalize(mult4(transformNrm, vec4(fN,0.f)).xyz), 0.f));
        ISTORE(attrib_texture_out, mosaicIdc(gatherMosaic(getUniformCoord(wofft*ATTRIB_EXTENT+  TANGENT_TID)), i), vec4( normalize(mult4(transformNrm, vec4(fT,0.f)).xyz), 0.f));
        ISTORE(attrib_texture_out, mosaicIdc(gatherMosaic(getUniformCoord(wofft*ATTRIB_EXTENT+BITANGENT_TID)), i), vec4( normalize(mult4(transformNrm, vec4(fB,0.f)).xyz), 0.f));
    };
};

//struct Transforms { mat3x4 transform, transformNrm; };
//layout ( binding = 0, set = 2, std430 ) readonly buffer VTE_TRANSFORMS { mat3x4 vTransforms[]; };

#define wsize vertexBlock.primitiveCount


LOCAL_SIZE_LAYOUT;

void main() {
    IFANY (wsize <= 0) return; const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    const uint inputID = gl_GlobalInvocationID.y + uint(cblock.inputID);
    const mat3x4 transformNrm = mat3x4(transpose(inverse(mat4(vTransforms[inputID]))));
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        const uint globalID = (w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x; IFALL (globalID >= wsize) break;
        [[flatten]] if (globalID < wsize && globalID >= 0) {

            // read pointer to required 
            const uint rofft = uint(vertexBlock.readOffset) + globalID, wofft = uint(vertexBlock.primitiveOffset) + globalID;

            // read material accessor
            uint matID = 0u; readByAccessorIndice(vertexBlock.materialAccessor, rofft, matID); matID += uint(vertexBlock.materialID);
            vmaterials[wofft] = int(matID);

            // make correct attributes for interpolation phases 
            calculateAttributes(int(rofft), int(wofft), transformNrm); // attributes calculation 
        }
    }
}
