#version 460 core
#extension GL_GOOGLE_include_directive : enable


//#define EXTEND_LOCAL_GROUPS
//#define USE_PUSH_CONSTANT
#define VERTEX_FILLING

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"


#include "../include/vertex.glsl"
#include "../include/vertex-input.glsl"

const vec4 nullvert = vec4(0.f.xxx,1.f);

const int VCOUNT = 3;

void precalculateNormals(in uint rofft, in uint trip, in mat3x4 transformNrm) {
    vec4 vertice[3] = {nullvert,nullvert,nullvert};
    
    // get vertices by accessor
    [[unroll]] for (int i=0;i<3;i++) {
        uint indiceID = rofft * VCOUNT + i; vec4 vert = vec4(0.f);
        readByAccessorIndice(vertexBlock.indiceAccessor, indiceID, indiceID);
        readByAccessor(vertexBlock.verticeAccessor, indiceID, vertice[i]);
        storePosition(ivec2(trip, i), vertice[i]);
    };

    // get bitfield value 
    vbitfields[trip] = vertexBlock.bitfield;

    // calculate geometrical normal
    lnrm[0].data[trip] = vec4(normalize(mult4(transformNrm, crossp4(vertice[1]-vertice[0], vertice[2]-vertice[0]))), uintBitsToFloat(vtParameteri(VTX_TYPE, vertexBlock.bitfield)));
};

//struct Transforms { mat3x4 transform, transformNrm; };
//layout ( binding = 0, set = 2, align_ssbo ) readonly buffer VTE_TRANSFORMS { mat3x4 vTransforms[]; };

#define wsize vertexBlock.primitiveCount


LOCAL_SIZE_LAYOUT;

void main() {
    IFANY (wsize <= 0) return; const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 2097152u);
    const uint inputID = gl_GlobalInvocationID.y + uint(cblock.inputID);
    const mat3x4 transformNrm = mat3x4(transpose(inverse(mat4(vTransforms[inputID]))));
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        const uint globalID = (w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x; IFALL (globalID >= wsize) break;
        [[flatten]] if (globalID < wsize && globalID >= 0) {
            const uint rofft = uint(vertexBlock.readOffset) + globalID, wofft = uint(vertexBlock.primitiveOffset) + globalID;
            precalculateNormals(rofft, wofft, transformNrm);
        };
    };
};
