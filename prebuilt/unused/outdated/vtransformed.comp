#version 460 core
#extension GL_GOOGLE_include_directive : enable

//#define EXTEND_LOCAL_GROUPS
#define VERTEX_FILLING
//#define USE_PUSH_CONSTANT

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
//#include "../include/vertex.glsl"
#include "../include/vertex-input.glsl"

LOCAL_SIZE_LAYOUT;

// attribute formating
const int NORMAL_TID = 0;
const int TEXCOORD_TID = 1;
const int TANGENT_TID = 2;
const int BITANGENT_TID = 3;
const int VCOLOR_TID = 4;
const int VCOUNT = 3;


bool nvlda(in vec4 a) { return dot(a,a)<=SFN; };
bool nvlda(in vec3 a) { return dot(a,a)<=SFN; };
bool nvlda(in vec2 a) { return dot(a,a)<=SFN; };
void calculateTBN(in int rofft, in int trip, in mat3x4 transformNrm) {

    // alloc arrays
    vec4 normals[3] = {0.f.xxxx,0.f.xxxx,0.f.xxxx};
    vec4 tangent[3] = {0.f.xxxx,0.f.xxxx,0.f.xxxx};
    vec4 texcoord[3] = {0.f.xxxx,0.f.xxxx,0.f.xxxx};
    vec4 vertice[3] = {0.f.xxxx,0.f.xxxx,0.f.xxxx};
    
    // get vertices
    [[unroll]] for (int i=0;i<3;i++) {
        uint indiceID = rofft * VCOUNT + i;
        readByAccessorIndice(vertexBlock.indiceAccessor, indiceID, indiceID);
        readByAccessor(vertexBlock.verticeAccessor, indiceID, vertice[i]);
    };

    // calculate geometrical normal
    mat3x3 dlps = mat3x3(vertice[0].xyz, vertice[1].xyz, vertice[2].xyz); dlps[1] -= dlps[0], dlps[2] -= dlps[0];
    const vec4 gnormal = vec4(cross(dlps[1], dlps[2]), 0.f);
    ISTORE(lnrm, trip, vec4(normalize(mult4(transformNrm, gnormal).xyz), uintBitsToFloat(parameteri(VTX_TYPE, uint(vbitfields[trip])))));

    // load attrib data
    for (uint a=vertexBlock.attributeOffset;a<min(min(ATTRIB_EXTENT, attributes.length()), vertexBlock.attributeCount)+vertexBlock.attributeOffset;a++) {
        const int ai = attributes[a].attributeID;
        [[unroll]] for (int i=0;i<3;i++) {
            vec4 attribValue = vec4(0.f); uint indiceID = rofft * VCOUNT + i;
            readByAccessorIndice(vertexBlock.indiceAccessor, indiceID, indiceID);
            readByAccessor(attributes[a].accessorID, indiceID, attribValue);
            [[flatten]] if (ai ==   NORMAL_TID) {  normals[i] = attribValue; };
            [[flatten]] if (ai ==  TANGENT_TID) {  tangent[i] = attribValue; };
            [[flatten]] if (ai == TEXCOORD_TID) { texcoord[i] = attribValue; };
        };
    };
    [[unroll]] for (int i=0;i<3;i++) { if (nvlda(normals[i].xyz)) normals[i] = gnormal; };


    // getting tangents and bitangents
    mat3x2 dlts = mat3x2(texcoord[0].xy, texcoord[1].xy, texcoord[2].xy); dlts[1] -= dlts[0], dlts[2] -= dlts[0];

    const ivec2    NORMAL_ = gatherMosaic(getUniformCoord(trip*ATTRIB_EXTENT+NORMAL_TID));
    const ivec2   TANGENT_ = gatherMosaic(getUniformCoord(trip*ATTRIB_EXTENT+TANGENT_TID));
    const ivec2 BITANGENT_ = gatherMosaic(getUniformCoord(trip*ATTRIB_EXTENT+BITANGENT_TID));
    [[unroll]] for (int i=0;i<3;i++) {
        // calc raw TBN 
        float idet = 1.f/(determinant(mat2(dlts[1],dlts[2]))); // inv determinant
        vec3 t = fma(dlts[2].yyy, dlps[1], -dlts[1].y * dlps[2]), b = fma(dlts[1].xxx, dlps[2], -dlts[2].x * dlps[1]), n = gnormal.xyz;//normals[i].xyz; // pre-tbn

        // if texcoord not found or incorrect, calculate by axis
        [[flatten]] if (nvlda(abs(dlts[1])) && nvlda(abs(dlts[2]))) {
            const vec3 c0 = cross(n, vec3(0.f, 0.f, 1.f)), c1 = cross(n, vec3(0.f, 1.f, 0.f));
            t = length(c0) >= length(c1) ? c0 : c1, b = cross(t, n);
            idet = 1.f;
        };
        
        { // orthonormalization process
            t -= n * dot( t, n );
            b -= n * dot( b, n );
            b -= t * dot( b, t );
        };

        // if none of native tangent, use generated
        if (nvlda(tangent[i].xyz)) { tangent[i].xyz = (idet*t); };

        // transform and store TBN
        ISTORE(attrib_texture_out, mosaicIdc(BITANGENT_, i), vec4(normalize(mult4(transformNrm, vec4(normalize(idet*b),0.f))), 0.0f));
        ISTORE(attrib_texture_out, mosaicIdc(  TANGENT_, i), vec4(normalize(mult4(transformNrm, tangent[i])), 0.0f));
        ISTORE(attrib_texture_out, mosaicIdc(   NORMAL_, i), vec4(normalize(mult4(transformNrm, normals[i])), 0.0f));
    }
}

//struct Transforms { mat3x4 transform, transformNrm; };
//layout ( binding = 0, set = 2, std430 ) readonly buffer VTE_TRANSFORMS { mat3x4 vTransforms[]; };

#define wsize vertexBlock.primitiveCount

void main() {
    IFANY (wsize <= 0) return; const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    const uint inputID = gl_GlobalInvocationID.y + uint(cblock.inputID);
    const mat3x4 transformNrm = mat3x4(transpose(inverse(mat4(vTransforms[inputID]))));
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        const uint globalID = (w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x; IFALL (globalID >= wsize) break;
        [[flatten]] if (globalID < wsize && globalID >= 0) {

            // constant material ID from vertex instance
            const uint rofft = uint(vertexBlock.readOffset) + globalID, wofft = uint(vertexBlock.primitiveOffset) + globalID;

            // read material accessor
            uint matID = 0u; readByAccessorIndice(vertexBlock.materialAccessor, rofft, matID); matID += uint(vertexBlock.materialID);

            // planned to support quad based geometry
            vmaterials[wofft] = int(matID);
            vbitfields[wofft] = vertexBlock.bitfield;
            
            // load vertex data
            
            [[unroll]] for (int i=0;i<3;i++) {
                vec4 vertice = vec4(0.f, 0.f, 0.f, 1.f); uint indiceID = rofft * VCOUNT + i;
                readByAccessorIndice(vertexBlock.indiceAccessor, indiceID, indiceID);
                readByAccessor(vertexBlock.verticeAccessor, indiceID, vertice);
                storePosition(ivec2(wofft, i), vertice);
            };

            // load attrib data
            for (uint a=vertexBlock.attributeOffset;a<min(min(ATTRIB_EXTENT, attributes.length()), vertexBlock.attributeCount)+vertexBlock.attributeOffset;a++) {
                const int ai = attributes[a].attributeID;
                [[unroll]] for (int i=0;i<3;i++) {
                    vec4 attribValue = vec4(0.f); uint indiceID = rofft * VCOUNT + i;
                    readByAccessorIndice(vertexBlock.indiceAccessor, indiceID, indiceID);
                    readByAccessor(attributes[a].accessorID, indiceID, attribValue);
                    storeAttribute(ivec3(wofft, ai, i), attribValue);
                };
                storeAttribute(ivec3(wofft, ai, 3), 0.f.xxxx);
            };

            // 
            calculateTBN(int(rofft), int(wofft), transformNrm);
        }
    }
}
